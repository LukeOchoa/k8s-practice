For this question, please set the context to cluster3 by running:

kubectl config use-context cluster3


In this task, we have to create two identical environments that are running different versions of the application. The team decided to use the Blue/green deployment method to deploy a total of 10 application pods which can mitigate common risks such as downtime and rollback capability.

Also, we have to route traffic in such a way that 30% of the traffic is sent to the green-apd environment and the rest is sent to the blue-apd environment. All the development processes will happen on cluster 3 because it has enough resources for scalability and utility consumption.

Specification details for creating a blue-apd deployment are listed below: -

    The name of the deployment is blue-apd.
    Use the label type-one: blue.
    Use the image kodekloud/webapp-color:v1.
    Add labels to the pod type-one: blue and version: v1.

Specification details for creating a green-apd deployment are listed below: -

    The name of the deployment is green-apd.
    Use the label type-two: green.
    Use the image kodekloud/webapp-color:v2.
    Add labels to the pod type-two: green and version: v1.

We have to create a service called route-apd-svc for these deployments. Details are here: -

    The name of the service is route-apd-svc.
    Use the correct service type to access the application from outside the cluster and application should listen on port 8080.
    Use the selector label version: v1.

NOTE: - We do not need to increase replicas for the deployments, and all the resources should be created in the default namespace.



You can check the status of the application from the terminal by running the curl command with the following syntax:

curl http://cluster3-controlplane:NODE-PORT




You can SSH into the cluster3 using ssh cluster3-controlplane command.

    Is blue deployment configured correctly?

    Is green deployment configured correctly?

    Is service configured correctly?



##############################

THE Answer:
==============================


Run the following command to change the context: -

kubectl config use-context cluster3


In this task, we will use the kubectl command. Here are the steps: -


    Use the kubectl create command to create a deployment manifest file as follows: -

kubectl create deployment blue-apd --image=kodekloud/webapp-color:v1 --dry-run=client -o yaml > <FILE-NAME-1>.yaml


Do the same for the other deployment and service.

kubectl create deployment green-apd --image=kodekloud/webapp-color:v2 --dry-run=client -o yaml > <FILE-NAME-2>.yaml



kubectl create service nodeport route-apd-svc --tcp=8080:8080 --dry-run=client -oyaml > <FILE-NAME-3>.yaml


    Open the file with any text editor such as vi or nano and make the changes as per given in the specifications. It should look like this: -

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    type-one: blue
  name: blue-apd
spec:
  replicas: 7
  selector:
    matchLabels:
      type-one: blue
      version: v1
  template:
    metadata:
      labels:
        version: v1
        type-one: blue
    spec:
      containers:
        - image: kodekloud/webapp-color:v1
          name: blue-apd


We will deploy a total of 10 application pods. Also, we have to route 70% traffic to blue-apd and 30% traffic to the green-apd deployment according to the task description.

Since the service distributes traffic to all pods equally, we have to set the replica count 7 to the blue-apd deployment so that the given service will send ~70% traffic to the deployment pods.


green-apd deployment should look like this: -

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    type-two: green
  name: green-apd
spec:
  replicas: 3
  selector:
    matchLabels:
      type-two: green
      version: v1
  template:
    metadata:
      labels:
        type-two: green
        version: v1
    spec:
      containers:
        - image: kodekloud/webapp-color:v2
          name: green-apd


route-apd-svc service should look like this: -

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: route-apd-svc
  name: route-apd-svc
spec:
  type: NodePort
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    version: v1

    Now, create a deployment and service by using the kubectl create -f command: -

kubectl create -f <FILE-NAME-1>.yaml -f <FILE-NAME-2>.yaml -f <FILE-NAME-3>.yaml



